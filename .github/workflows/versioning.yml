name: Update version and commit message

# This workflow is triggered on push events to the main branch
on:
  push:
    branches:
      - main

jobs:
  update:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2  
        with:
          token: ${{ secrets.GH_PAT }}

      # Create version.txt if it doesn't exist
      - name: Create version file
        run: |
          if [[ ! -f version.txt ]]; then
            echo "Version: 000000-00000000" > version.txt
          fi

      # Get the last version number from the version.txt file
      - name: Get last version
        run: |
          echo "LAST_VERSION=$(cat version.txt | grep -oP '(?<=Version: ).*')" >> $GITHUB_ENV
      
      # Get the short commit hash of the latest commit
      - name: Get short commit hash
        run: echo "HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Get the current date in the format YYYYMMDD
      - name: Get current date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      # Generate a version number using the commit hash and the current date
      - name: Generate version number
        run: echo "VERSION=${HASH}-${DATE}" >> $GITHUB_ENV
      
      # Update the version.txt file with the new version number
      - name: Update version file
        run: |
          echo "Version: $VERSION" > version.txt

      # Create commits.md if it doesn't exist
      - name: Create commits file
        run: |
          if [[ ! -f commits.md ]]; then
            touch commits.md
          fi
      
      # Update the markdown file with the commit log since the last version
      - name: Update markdown file
        run: |
          LAST_VERSION_SHORT_HASH=$(echo $LAST_VERSION | cut -d'-' -f1)
          LAST_VERSION_COMMIT=$(git rev-list -n 1 $LAST_VERSION_SHORT_HASH 2>/dev/null || echo "")
          if [ -z "$LAST_VERSION_COMMIT" ]; then
            git log --pretty=format:'## Version: $VERSION%n### %s%n%b' >> commits.md
          else
            git log --pretty=format:'## Version: $VERSION%n### %s%n%b' $LAST_VERSION_COMMIT..HEAD >> commits.md
          fi

      # If there are changes, commit and push the changes
      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt commits.md
          git commit -m "Update version to $VERSION"
          git push