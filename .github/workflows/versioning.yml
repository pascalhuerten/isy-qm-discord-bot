name: Update version and commit message

# This workflow is triggered on push events to the main branch
on:
  push:
    branches:
      - main

jobs:
  check_author:
    runs-on: ubuntu-latest
    outputs:
      is_action: ${{ steps.check.outputs.is_action }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check last commit author
        id: check
        run: |
          LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          if [ "$LAST_COMMIT_AUTHOR" = "GitHub Action" ]; then
            echo "is_action=true" >> $GITHUB_OUTPUT
          else
            echo "is_action=false" >> $GITHUB_OUTPUT
          fi

  update:
    needs: check_author
    if: needs.check_author.outputs.is_action == 'false'
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2  
        with:
          # Fetch all history to get access to all commits
          fetch-depth: 0
          # PAT is required to push changes back to the repository
          token: ${{ secrets.GH_PAT }}

      # Create version.txt if it doesn't exist
      - name: Create version file
        id: create-version
        run: |
          if [[ ! -f version.txt ]]; then
            echo "Version: 000000-00000000" > version.txt
          fi

      - name: Get last version
        id: get-last-version
        run: |
          echo "LAST_VERSION=$(cat version.txt | grep -oP '(?<=Version: ).*')" >> "$GITHUB_OUTPUT"

      - name: Get short commit hash
        id: get-short-commit-hash
        run: echo "HASH=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Get current date
        id: get-current-date
        run: echo "DATE=$(date +'%Y%m%d')" >> "$GITHUB_OUTPUT"

      - name: Generate version number
        id: generate-version-number
        run: echo "VERSION=${{ steps.get-short-commit-hash.outputs.HASH }}-${{ steps.get-current-date.outputs.DATE }}" >> "$GITHUB_OUTPUT"

      - name: Update version file
        run: |
          echo "Version: ${{ steps.generate-version-number.outputs.VERSION }}" > version.txt

      - name: Create commits file
        run: |
          if [[ ! -f commits.md ]]; then
            echo -e "# Commit history\n" > commits.md
          fi

      - name: Update markdown file
        run: |
          LAST_VERSION_SHORT_HASH=$(echo ${{ steps.get-last-version.outputs.LAST_VERSION }} | cut -d'-' -f1)
          LAST_VERSION_COMMIT=$(git rev-list -n 1 $LAST_VERSION_SHORT_HASH 2>/dev/null || echo "")
          REPO_URL=$(git config --get remote.origin.url)
          REPO_URL=${REPO_URL%.git}
          if [[ $REPO_URL == git@github.com:* ]]; then
            REPO_URL=${REPO_URL#*:}
            REPO_URL="https://github.com/$REPO_URL"
          fi
          COMMIT_TEMPLATE="## %s%n%n> Version: [${{ steps.generate-version-number.outputs.VERSION }}]($REPO_URL/commit/%H)%n%n%b"
          # Step 1: Generate the commit log
          if [ -z "$LAST_VERSION_COMMIT" ]; then
            git log --pretty=format:"$COMMIT_TEMPLATE%n---END---" --reverse > raw_commits.md
          else
            git log --pretty=format:"$COMMIT_TEMPLATE%n---END---" --reverse $LAST_VERSION_COMMIT..HEAD > raw_commits.md
          fi

          # Step 2: Mark undesired commits with ---BEGIN--- and ---END---
          awk -v RS="---END---\n" '{if (/Merge branch|Update version to/) print "---BEGIN---\n" $0 "---END---\n"; else print $0 "---END---\n"}' raw_commits.md > marked_commits.md

          # Step 3: Remove lines between ---BEGIN--- and ---END---
          awk '/---BEGIN---/{flag=1; next} /---END---/{flag=0} !flag' marked_commits.md > filtered_commits.md

          # Step 4: Remove lines starting with ---END---
          sed -i '/^---END---/d' filtered_commits.md

          # Step 5: Remove extra empty lines and append to commits.md
          sed '/^$/N;/^\n$/D' filtered_commits.md >> commits.md

      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt commits.md
          git commit -m "Update version to ${{ steps.generate-version-number.outputs.VERSION }}"
          git push